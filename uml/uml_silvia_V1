@startuml
title UML-Klassendiagramm - Lunchify V1

' Definiere die User-Klasse
class User {
  + id: int
  + name: String
  + email: String
  + password: String
  + role: UserRole
  + state: UserStatus
  --
  + login()
  + logout()
  + uploadInvoice(invoice: Invoice)
  + viewCurrentReimbursment(): List<Invoice>
  + viewReimbursementHistory(): List<Invoice>
  + editInvoice(invoiceId: int, newDetails: Invoice)
  + deleteInvoice(invoiceId: int)
}


' Admin erbt von User
class Admin {
  + viewAllReimbursements(): List<Invoice> 'hier fehlt noch das Filtern und suchen
  + updateReimbursementRates(newRate: Map<String, float>)
  + manageUsers(action: String, user: User)
  + exportReimbursements(format: String)
  + detectAnomalies(): List<Invoice>
}
User <|-- Admin

' Rechnungsklasse
class Invoice {
  + id: int
  + date: Date
  + amount: float
  + category: InvoiceCategory
  + status: InvoiceStatus
  + user: User
  + file: File
  --
  + uploadImage(image: File)
  + calculateReimbursement(): float
}

' Verbindung von Employee zu Invoice
User --> "*" Invoice : uploads

' Rückerstattungs-Klasse
class Reimbursement {
  + id: int
  + invoice: Invoice
  + approvedAmount: float
  + processedDate: Date
  --
  + processReimbursement()
}

' Verbindung von Invoice zu Reimbursement
Invoice --> Reimbursement : processed in

' Admin verwaltet Rückerstattungen
Admin --> Reimbursement : manages

' Systemkonfigurations-Klasse
class SystemConfiguration {
  + reimbursementRates: Map<String, float>
  --
  + updateRates(newRates: Map<String, float>)
}

' Admin kann die Konfiguration ändern
Admin --> SystemConfiguration : modifies

' Anomalie-Erkennungsklasse
class AnomalyDetection {
  + detectFraudulentActivity(invoices: List<Invoice>): List<Invoice>
}

' Admin überwacht Anomalien
Admin --> AnomalyDetection : monitors

'TODO: OCR muss noch hinzugefügt werden - v2

@enduml
