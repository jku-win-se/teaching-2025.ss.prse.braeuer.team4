@startuml

package frontend {
  class UserDashboard {}
  class AdminDashboard {}
  class LoginPage {}
  class InvoiceUplaod {}
}

package model {
  class User {
    id: int
    name: String
    email: String
    password: String 
    role: UserRole
    ---
    +Getter(), Setter()
  }
  
  class Admin {}
  
  class Invoice {
    id: int 
    date: Date 
    amount: float 
    category: InvoiceCategory
    status: InvoiceState
    user: User
    file: File
    ---
    +Getter(), Setter()
  }
  
  class Reimbursement {
    id: int
    invoice: invoice
    approvedAmount: float
    processedDate: Date
    ---
    +Getter(), Setter()
  }
  
  enum UserRole {
    EMPLOYEE, ADMIN;
  }
  enum UserState {
    ACTIVE, INAVTIVE, SUSPENDED;
  }
  enum InvoiceCategory {
    RESTAURANT, SUPERMARKET;
  }
  enum InvoiceState {
    PENDING, APPROVED, REJECTED;
  }
}

package logic {
  class SessionManager {
    currentUser: User
    ---
    +Getter(), Setter()
  }
  
  class UserService {
    ---
    +authenticate()
  }
  
  class InvoiceService {
    invoices: List<Invoice>
    ---
    +invoiceDateAlreadyUsed
    +isValidDate
    +isWorkday
    +isValidFloat
    +isAmountValid
    +getAllInvoices
    +getAllInvoices
    +addInvoice
  }
  
  class OCRService {
    tesseract: Tesseract
    ---
    +extractText(); 
  }
  
  class ReimbursementService{
    user: User
    reimbursementAmount: float
    supermarketLimit: float
    restaurantLimit: float
     ---
    +getReimbursementAmount()
    +getLimit()
    +setReimbursementAmount()
  }
  
  class UploadService {
    ocrService: OCRService
     ---
    +processInvoiceImage()
  }
}

package database {
  class DatabaseConnection {
    URL: String
    USER: String
    PASSWORD: String
     ---
    +connect()
  }
}

package controller {
  class LoginPageController {
     ---
    +initialize()
    +handleLogin()
    +handleForgotPassword()
    +showerrorElems()
    +hideErrorElems()
    +isValidEmail()
  }
  class UserDashboardController {
     adminController: AdminDashboardController
     ----
    +initialize()
    +openInvoiceSubmissionWindow()
  }
  
  class AdminDashboardController {
     ---
    +initialize()
    +onClickOpenInvoiceSubmissionWindow()
  }
  
  class InvoiceUploadController {
     ---
    +initialize()
    +openFileChooser()
    +showAlert()
    +checkFields()
    +addInvoice()
    +updateLabel()
    +getFile()
    +isDateValid()
    +resetForm()
    +setReimbursementAmount()
  }
}


' ========== Beziehungen ==========
User <|-- Admin 

User "*"--"1" UserRole
User "*"--"1" UserState

Invoice "*"--"1" InvoiceCategory
Invoice "*"--"1" InvoiceState
Invoice "*"--"1" User
Reimbursement "1"--"*" Invoice 

UserService --> SessionManager :  bergibt
UserService --> User : authentifiziert
InvoiceService --> Invoice : verwaltet
InvoiceService --> UploadService : nutzt
UploadService --> OCRService : benutzt
ReimbursementService --> Reimbursement : ermittelt
SessionManager --> InvoiceService :  bergibt User

controller <--> database : interagiert mit
controller <--> frontend : interagiert mit

LoginPageController --> UserService : nutzt
AdminDashboardController <-- SessionManager :  bergibt
UserDashboardController <-- SessionManager:  bergibt
InvoiceUploadController <-- InvoiceService : nutzt

@enduml
