@startuml

package frontend {
  class UserDashboard {}
  class AdminDashboard {}
  class LoginPage {}
  class InvoiceUplaod {}
  class AdminEditReimbursement {}
  class currReimbursements {}
  class EditReimbursement {}
  class ModifyReimbursement {}
  class ModifyUsers {}
  class ReimbusementHistory {}
  class Search {}
  class UserDropDown {}
}

package model {
  class User {
    id: int
    name: String
    email: String
    password: String
    role: UserRole
    ---
    +Getter(), Setter()
  }

  class Admin {}

  class Invoice {
    id: int
    date: Date
    amount: float
    category: InvoiceCategory
    user: User
    file: File
    ---
    +Getter(), Setter()
  }

  class Reimbursement {
    id: int
    invoice: invoice
    status: ReimbursementState
    approvedAmount: float
    processedDate: Date
    ---
    +Getter(), Setter()
  }

  enum UserRole {
    EMPLOYEE, ADMIN;
  }
  enum UserState {
    ACTIVE, INAVTIVE, SUSPENDED;
  }
  enum InvoiceCategory {
    RESTAURANT, SUPERMARKET;
  }
  enum ReimbursementState {
    PENDING, APPROVED, REJECTED;
  }
}

package logic {
  class SessionManager {
    currentUser: User
    ---
    +Getter(), Setter()
  }

  class UserService {
    ---
    +authenticate()
  }

  class InvoiceService {
    invoices: List<Invoice>
    ocrService: OCRService
    ---
    +processInvoiceImage()
    +invoiceDateAlreadyUsed()
    +isValidDate()
    +isWorkday()
    +isValidFloat()
    +isAmountValid()
    +getAllInvoices()
    +getAllInvoices()
    +addInvoice()
  }

  class OCRService {
    tesseract: Tesseract
    OCRService.CategoryAnalyzer
    ---
    +extractText()
  }

  class ReimbursementService{
    user: User
    reimbursementAmount: float
    supermarketLimit: float
    restaurantLimit: float
     ---
    +getReimbursementAmount()
    +getLimit()
    +setReimbursementAmount()
  }

  class SearchService {
    provider: ConnectionProvider
    searchUsers();
  }

}

package database {
  class DatabaseConnection {
    URL: String
    USER: String
    PASSWORD: String
     ---
    +connect()
  }

  interface ConnectionProvider {
    getConnection();
  }
}

package controller {
  class LoginPageController {
     ---
    +initialize()
    +handleLogin()
    +handleForgotPassword()
    +showerrorElems()
    +hideErrorElems()
    +isValidEmail()
  }

  class SearchController {
          +TextField searchField
          +ListView<String> listOfMatches
          +Label userNotFoundLabel

          +initialize(): void
          +handleBackToDashboard(event: MouseEvent): void
          +handleUserChoice(event: MouseEvent): void
      }


  class UserDashboardController {
     adminController: AdminDashboardController
     ----
    +initialize()
    +openInvoiceSubmissionWindow()
  }

  class AdminDashboardController {
     ---
    +initialize()
    +onClickOpenInvoiceSubmissionWindow()
  }

  class InvoiceUploadController {
     ---
    +initialize()
    +openFileChooser()
    +showAlert()
    +checkFields()
    +addInvoice()
    +updateLabel()
    +getFile()
    +isDateValid()
    +resetForm()
    +setReimbursementAmount()
  }

  class BaseUploadController {
          user: User
          invoiceService: InvoiceService
          reimbursementService: ReimbursementService
          invoices: List<Invoice>
          ---
          setReimbursementAmount(amountText: String)
          checkFields()
          updateLabel(label: Label, isValid: boolean, errorText: String, successText: String)
      }

   class EditReimbursementController extends BaseUploadController {
          reimbursement: Reimbursement
          selectedInvoice: Invoice
          ---
          setReimbursement(reimb: Reimbursement)
          showEditConfirmationDialog()
          showDeleteConfirmationDialog()
      }


  class AdminEditReimbursementController extends EditReimbursementController {
     ComboBox<ReimbursementState> statusBox
     initialize(): void
     handleBack(): void
     populateBoxes(): void
     handleBackToReimbursementHistoryController(): void
  }

  class CurrReimbursementController {
          user: User
          reimbursementService: ReimbursementService
          ---
          setReimbursementService(reimbursementService: ReimbursementService)
          setCurrentMonthLabel()
          getTotalReimbursementAmountLabel(): Label
  }

   class ModifyReimbursementController {
          user: User
          reimbursementService: ReimbursementService
          ---
          resetForm()
          setReimbursementAmount(amountText: String)
    }

    class ModifyUsersController {
            user: User
            userService: UserService
            ---
            handleUserModeChange(actionEvent: ActionEvent)
            loadUserToEdit()
            loadUserList()
    }

    class ReimursementHistoryController {
            user: User
            reimbursementService: ReimbursementService
            userService: UserService
            reimbursements: List<Reimbursement>
           ...
            ---
            update()
            delete()
            filter()
  }


}


' ========== Beziehungen ==========
User <|-- Admin

User "*"--"1" UserRole
User "*"--"1" UserState

Invoice "*"--"1" InvoiceCategory
Invoice "*"--"1" User
Reimbursement "1"--"1" Invoice
Reimbursement "*"--"1" ReimbursementState

UserService --> SessionManager :  uebergibt
UserService --> User : authentifiziert
InvoiceService --> Invoice : verwaltet
InvoiceService --> OCRService : nutzt
ReimbursementService --> Reimbursement : verwaltet
SessionManager --> InvoiceService :  uebergibt User
InvoiceService --> ReimbursementService : aktiviert

logic <--> database : interagiert mit
controller <--> frontend : interagiert mit
DatabaseConnection --> ConnectionProvider : implementiert

LoginPageController --> UserService : nutzt
AdminDashboardController <-- SessionManager :  uebergibt
UserDashboardController <-- SessionManager:  uebergibt
InvoiceUploadController <-- InvoiceService : nutzt
SearchController --> SearchService : nutzt
AdminEditReimbursementController --> ReimbursementService : nutzt
EditReimbursementController --> ReimbursementService : nutzt
CurrReimbursementController --> ReimbursementService : nutzt
ModifyReimbursementController --> ReimbursementService : nutzt
ModifyUsersController --> UserService : nutzt
@enduml
