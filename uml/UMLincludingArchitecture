@startuml
skinparam packageStyle rect

'========================
' Frontend Layer (JavaFX)
'========================
package "Frontend Layer (JavaFX)" {
  class LoginApp
  class DashboardController
}

'==============================
' Business Logic Layer
'==============================
package "Business Logic Layer" {
  class AuthService {
    + login(email: String, password: String): User
    + logout(user: User)
  }

  class InvoiceService {
    + uploadInvoice(invoice: Invoice)
    + viewCurrentReimbursment(user: User): List<Invoice>
    + viewReimbursementHistory(user: User): List<Invoice>
    + editInvoice(invoiceId: int, newDetails: Invoice)
    + deleteInvoice(invoiceId: int)
    + processReimbursement(invoice: Invoice): Reimbursement
    + detectAnomalies(): List<Invoice>
  }

  class AdminService {
    + viewAllReimbursements(filter: String): List<Invoice>
    + updateReimbursementRates(newRates: Map<String, float>)
    + manageUsers(action: String, user: User)
    + exportReimbursements(format: String)
  }
}

'================================
' Data Access Layer
'================================
package "Data Access Layer" {
  class UserRepository {
    + findUserByEmail(email: String): User
    + saveUser(user: User)
  }
  class InvoiceRepository {
    + findInvoicesByUser(user: User): List<Invoice>
    + saveInvoice(invoice: Invoice)
  }
  class DatabaseConnection {
    + connect(): Connection
  }
}

'==========================
' Database Layer
'==========================
package "Database" {
  class PostgresDB {
    + executeQuery(query: String)
  }
}

'==========================
' Models (Domain Entities)
'==========================
package "Models" {
  class User {
    + id: int
    + name: String
    + email: String
    + password: String
    + role: UserRole
    + state: UserStatus
    --
    + login()
    + logout()
    + uploadInvoice(invoice: Invoice)
    + viewCurrentReimbursment(): List<Invoice>
    + viewReimbursementHistory(): List<Invoice>
    + editInvoice(invoiceId: int, newDetails: Invoice)
    + deleteInvoice(invoiceId: int)
  }

  class Admin {
    + id: int
    + name: String
    + email: String
    + password: String
    + role: UserRole
    + state: UserStatus
    --
    + viewAllReimbursements(): List<Invoice>
    + updateReimbursementRates(newRate: Map<String, float>)
    + manageUsers(action: String, user: User)
    + exportReimbursements(format: String)
    + detectAnomalies(): List<Invoice>
  }
  User <|-- Admin

  class Invoice {
    + id: int
    + date: Date
    + amount: float
    + category: InvoiceCategory
    + status: InvoiceStatus
    + file: File
    --
    + uploadImage(image: File)
    + calculateReimbursement(): float
  }
  User --> "*" Invoice : uploads

  class Reimbursement {
    + id: int
    + invoice: Invoice
    + approvedAmount: float
    + processedDate: Date
    --
    + processReimbursement()
  }
  Invoice --> Reimbursement : processed in
  Admin --> Reimbursement : manages

  class SystemConfiguration {
    + reimbursementRates: Map<String, float>
    --
    + updateRates(newRates: Map<String, float>)
  }
  Admin --> SystemConfiguration : modifies

  class AnomalyDetection {
    + detectFraudulentActivity(invoices: List<Invoice>): List<Invoice>
  }
  Admin --> AnomalyDetection : monitors
}

'==========================
' Inter-Layer Interactions
'==========================

' Frontend -> Business Logic
LoginApp --> AuthService : "Calls login/logout"
DashboardController --> AuthService : "Access for Admin/User Dashboard"

' Business Logic -> Data Access
AuthService --> UserRepository : "Validates and retrieves user data"
InvoiceService --> InvoiceRepository : "Handles invoice data"
AdminService --> UserRepository : "Manages user data"

' Data Access -> Database
UserRepository --> DatabaseConnection : "Connects to DB"
InvoiceRepository --> DatabaseConnection : "Connects to DB"
DatabaseConnection --> PostgresDB : "Executes SQL queries"

' Business Logic interacting with Domain Models
AuthService --> User : "Uses domain model"
InvoiceService --> Invoice : "Uses domain model"
InvoiceService --> Reimbursement : "Processes reimbursements"
AdminService --> Admin : "Performs admin functions"

@enduml
