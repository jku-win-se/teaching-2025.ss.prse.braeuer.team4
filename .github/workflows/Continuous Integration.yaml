name: Continuous Integration

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "continuous_integration"
  build-test-publish:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up JDK 21 for x64 build
      - name: Set up JDK 21 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: x64

      #integrate TestFX
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Start x virtual framebuffer
        run: |
          export DISPLAY=:99
          export JAVA_OPTS="--module-path ${HOME}/.m2/repository/org/openjfx/javafx-controls/21/javafx-controls-21.jar --add-modules javafx.controls,javafx.fxml"
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
          echo "JAVA_OPTS=${JAVA_OPTS}" >> $GITHUB_ENV
          
       - name: Build and Test with Maven
         run: mvn -B clean verify -Dexec.args="--module-path ${HOME}/.m2/repository/org/openjfx/javafx-controls/21/javafx-controls-21.jar --add-modules javafx.controls,javafx.fxml"

      - name: Create staging folder
        run: mkdir -p staging && cp target/*.jar staging/

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: lunchify-artifact
          path: staging

      - name: PMD static code analysis
        uses: pmd/pmd-github-action@v2
        with:
          version: '6.55.0'
          sourcePath: 'src/main/java'
          rulesets: 'ruleset.xml'
          createGitHubAnnotations: true
          analyzeModifiedFilesOnly: false

      - name: Publish unit test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/target/surefire-reports/*.xml
          
      # Maven test, build and package compiled code in its distributable format, such as a JAR.
      - name: Maven package
        run: mvn package

      - name: Create folder
        run: mkdir staging && cp target/*.jar staging

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: project
          path: staging

      # Perform PMD code check
      - name: PMD code check
        uses: pmd/pmd-github-action@v2
        id: pmd
        with:
          version: '6.55.0'
          sourcePath: 'src/main/java'
          rulesets: 'ruleset.xml'
          createGitHubAnnotations: true
          analyzeModifiedFilesOnly: false
      
      # Publish test results of executed unit tests
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/*.xml
            **/*.trx
            **/*.json
            !ruleset.xml
            !log4j2.xml
            !**/log4j2.xml
            !**/pmd/*.*
            !pom.xml
            !**/target/*
            !**/target/pmd/rulesets/*.*
          
